#!/bin/bash
# This code should (try to) follow Google's Shell Style Guide
# (https://google.github.io/styleguide/shell.xml)
set -e

CMD=$1
GITDIR=".xgit"
HEAD_DEFAULT="master"

warn () {
  echo "$@" >&2
}

die () {
  status="$1"
  shift
  warn "$@"
  exit "$status"
}

# each blob should be `<ascii tag without space> + <space> + <ascii decimal
# size> + <byte\0> + <binary object data>`.
# types: commit tree blob tag
githash() {
  TYPE="$1"
  FILE="$2"
  HASH_VALUE="$((echo -en ${TYPE}' '$(wc -c < ${FILE}|xargs)'\00';cat ${FILE})|shasum -a 1|cut -d ' ' -f 1)"
  echo $HASH_VALUE
}

gitcontent() {
  TYPE="$1"
  FILE="$2"
  GIT_CONTENT="$(echo -en ${TYPE}' '$(wc -c < ${FILE}|xargs)'\00';cat ${FILE})"
  echo $GIT_CONTENT
}

check() {
  if [ ! -d $GITDIR ] || [ ! -d $GITDIR/objects ]; then
      die 1 "you must init the xgit first, try \`xgit init\`."
  fi
}

walkall() {
  FILEPATH="$1"
  EXEC_MODULE="$2"
  [ "$FILEPATH" ] || exit 1
  for fp in $FILEPATH; do
      if [ -f $fp ]; then
          $EXEC_MODULE $fp
      elif [ -d $fp ]; then
          walkall $fp $EXEC_MODULE
      else
          die 1 "invalid file path ${FILEPATH}."
      fi
  done
}

find_object() {
  FILEHASH=$1
  OBJECT_PREFIX=${FILEHASH:0:2}
  OBJECT_DEST=${FILEHASH:2}
  FIND_OBJ="1"
  if [ -d $GITDIR/objects/${OBJECT_PREFIX} ]; then
      FIND_OBJ=$(ls $GITDIR/objects/${OBJECT_PREFIX}/* | grep ${OBJECT_DEST} | head -n 1 || echo "1")
  fi
  echo $FIND_OBJ
}

check_object_type() {
  OBJECT_LOCATION=$1
  OBJECT_HEADER=$(head -c 10 $OBJECT_LOCATION)
  case "$OBJECT_HEADER" in
  *commit*)
    echo "commit"
    ;;
  *tree*)
    echo "tree"
    ;;
  *blob*)
    echo "blob"
    ;;
  *tag*)
    echo "tag"
    ;;
  *)
    die 1 "Unknown object type."
    ;;
  esac
}

cat_object_file() {
  CAT_ARG="$1"
  CAT_FILEHASH="$2"
  OBJECT_LOCATION=$(find_object $CAT_FILEHASH)

  if [ $OBJECT_LOCATION == "1" ]; then
      die 1 "invalid hash $CAT_FILEHASH"
  fi

  case "$CAT_ARG" in
  -t)
    OBJECT_TYPE=$(check_object_type $OBJECT_LOCATION)
    echo $OBJECT_TYPE
    ;;
  -p)
    # TODO: split header and body, print out body...
    ;;
  *)
    die 1 "Unknown argument: $CAT_ARG."
    ;;
  esac
}

check_in_index() {
  FILENAME="$1"
  INDEX_FILE=$(cat $GITDIR/index | grep "${FILENAME}" | awk '{print $2}')
  if [ ! $INDEX_FILE ]; then
      echo "1"
  else
      echo $INDEX_FILE
  fi
}

add_into_index() {
  # TODO: 和当前的head比较是否有diff，如果有，允许加入到index，如果没有，不做任何事情.
  # 如果没有head（当前默认只支持一个head，不支持branch功能）即全部允许加入到index.

  FILENAME="$1"
  FILE_BLOB_OBJECT=$(githash "blob" $FILENAME)
  echo "xgit added the following files into index: "
  if [ ! -f $GITDIR/index ]; then
      touch $GITDIR/index
  fi

  INDEX_FILE=$(check_in_index $FILENAME)
  if [ $INDEX_FILE -eq 1 ]; then
      echo "adding ${FILENAME} to index"
      echo "${FILENAME} ${FILE_BLOB_OBJECT}" >> $GITDIR/index
  else
      echo "updating ${FILENAME} inside index"
      grep -v "${FILENAME}" $GITDIR/index > $GITDIR/replace.index
      mv $GITDIR/replace.index $GITDIR/index
      echo "${FILENAME} ${FILE_BLOB_OBJECT}" >> $GITDIR/index
  fi

  OBJECTS_DIR_PREFIX=${FILE_BLOB_OBJECT:0:2}
  OBJECTS_DESTINATION=${FILE_BLOB_OBJECT:2}
  if [ ! -d $GITDIR/objects/${OBJECTS_DIR_PREFIX} ]; then
      mkdir -p $GITDIR/objects/${OBJECTS_DIR_PREFIX}
  fi
  echo -n $(gitcontent "blob" $FILENAME) > $GITDIR/objects/${OBJECTS_DIR_PREFIX}/${OBJECTS_DESTINATION}
}

show_status() {
  if [ ! -f $GITDIR/index ]; then
      touch $GITDIR/index
  fi
  echo "xgit status"
  echo "                    "
  if [ -s $GITDIR/index ]; then
      echo "Staged: "
      cat $GITDIR/index
      echo "                    "
  else
      echo "Staged: "
      echo "                    "
  fi
  echo "Changes not staged: "
  for fp in $(ls .)
  do
      # compare with refs or staging area.
      if [ -f $GITDIR/refs/heads/$HEAD_DEFAULT ]; then
          # 如果index里包含该文件，和index里的object对比
          # 其次，找到refs指向的commit，然后根据这个commit遍历对应的tree和blob，对比差异.
          CURRENT_FP_GITHASH=$(githash "blob" $fp)
          echo "comparing $fp hashvalue $CURRENT_FP_GITHASH with stage and repository."
      else
          # 比较当前index区域，然后展示和work area diff.
          CURRENT_FP_GITHASH=$(githash "blob" $fp)
          INDEX_FILE=$(check_in_index $fp)
          if [ "$INDEX_FILE" == "1" ]; then
              echo "Untracked: $fp"
          else
              if [ "$INDEX_FILE" != "$CURRENT_FP_GITHASH" ]; then
                echo "$fp"
              fi
          fi
      fi
  done
}

[ "$CMD" ] || {
  echo "xgit - another git implementation via shell."
  echo "                     "
  echo "Syntax:"
  echo "xgit init"
  echo "xgit status"
  echo "xgit add [filepath]"
  echo "xgit commit [message]"
  exit 1
}

case "$CMD" in
  init)
    [ ! -d $GITDIR ] && mkdir -p $GITDIR
    [ ! -d $GITDIR/objects ] && mkdir -p $GITDIR/objects
    [ ! -d $GITDIR/refs/heads ] && mkdir -p $GITDIR/refs/heads
    ;;
  status)
    check
    show_status
    ;;
  add)
    check
    shift 1
    for fp in $@; do
        for f in $fp; do
            walkall $f add_into_index
        done
    done
    ;;
  cat-file)
    check
    shift 1
    cat_object_file $@
    ;;
  commit)
    # 新建一个commit对象，将stage area内容提交，生成一个commit object
    # commit object里包含parent及tree，tree object则表示当前一个目录的object树
    # tree object里可以嵌套tree和blob，这样即可串联所有文件.
    echo "TODO."
    ;;
  *)
    die 1 "Unknown command: $CMD."
    ;;
esac
