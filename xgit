#!/bin/bash
# This code should (try to) follow Google's Shell Style Guide
# (https://google.github.io/styleguide/shell.xml)
set -e

CMD=$1
GITDIR=".xgit"
HEAD_DEFAULT="master"
TMP_CACHE_NAME="/tmp/.xgit_cache_"

warn () {
  echo "$@" >&2
}

die () {
  status="$1"
  shift
  warn "$@"
  exit "$status"
}

# each blob should be `<ascii tag without space> + <space> + <ascii decimal
# size> + <byte\0> + <binary object data>`.
# types: commit tree blob tag
githash() {
  TYPE="$1"
  FILE="$2"
  HASH_VALUE="$((echo -en ${TYPE}' '$(wc -c < ${FILE}|xargs)'\00';cat ${FILE})|shasum -a 1|cut -d ' ' -f 1)"
  echo $HASH_VALUE
}

gitcontent() {
  TYPE="$1"
  FILE="$2"
  GIT_CONTENT="$(echo -en ${TYPE}' '$(wc -c < ${FILE}|xargs)'\00';cat ${FILE})"
  echo $GIT_CONTENT
}

check() {
  if [ ! -d $GITDIR ] || [ ! -d $GITDIR/objects ]; then
      die 1 "you must init the xgit first, try \`xgit init\`."
  fi
}

find_object() {
  FILEHASH=$1
  OBJECT_PREFIX=${FILEHASH:0:2}
  OBJECT_DEST=${FILEHASH:2}
  FIND_OBJ="1"
  if [ -d $GITDIR/objects/${OBJECT_PREFIX} ]; then
      FIND_OBJ=$(ls $GITDIR/objects/${OBJECT_PREFIX}/* | grep ${OBJECT_DEST} | head -n 1 || echo "1")
  fi
  echo $FIND_OBJ
}

check_object_type() {
  OBJECT_LOCATION=$1
  OBJECT_HEADER=$(head -c 10 $OBJECT_LOCATION)
  case "$OBJECT_HEADER" in
  *commit*)
    echo "commit"
    ;;
  *tree*)
    echo "tree"
    ;;
  *blob*)
    echo "blob"
    ;;
  *tag*)
    echo "tag"
    ;;
  *)
    die 1 "Unknown object type."
    ;;
  esac
}

cat_object_file() {
  CAT_ARG="$1"
  CAT_FILEHASH="$2"
  OBJECT_LOCATION=$(find_object $CAT_FILEHASH)

  if [ $OBJECT_LOCATION == "1" ]; then
      die 1 "invalid hash $CAT_FILEHASH"
  fi

  case "$CAT_ARG" in
  -t)
    OBJECT_TYPE=$(check_object_type $OBJECT_LOCATION)
    echo $OBJECT_TYPE
    ;;
  -p)
    # FIXME: trim header...
    cat ${OBJECT_LOCATION}
    ;;
  *)
    die 1 "Unknown argument: $CAT_ARG."
    ;;
  esac
}

check_in_index() {
  HASH="$1"
  if [ "${HASH}" == "1" ]; then
      echo "1"
  else
      INDEX_HASH=$(cat $GITDIR/index | grep "${HASH}" | awk '{print $2}')
      if [ ! "${INDEX_HASH}" ]; then
          echo "1"
      else
          echo ${INDEX_HASH}
      fi
  fi
}

write_object() {
  CONTENT_PATH="$1"
  TYPE="$2"
  HASH="$3"
  OBJECTS_DIR_PREFIX=${HASH:0:2}
  OBJECTS_DESTINATION=${HASH:2}
  if [ ! -d $GITDIR/objects/${OBJECTS_DIR_PREFIX} ]; then
      mkdir -p $GITDIR/objects/${OBJECTS_DIR_PREFIX}
  fi
  PREV_IFS=$IFS
  export IFS=""
  echo $(gitcontent $TYPE $CONTENT_PATH) > $GITDIR/objects/${OBJECTS_DIR_PREFIX}/${OBJECTS_DESTINATION}
  export IFS=${PREV_IFS}
}

calc_blob() {
  NAME="$1"
  EXEC_MODULE="$2"
  FILE_BLOB_OBJECT_HASH=$(githash "blob" $NAME)
  if [ "EXIST_"$EXEC_MODULE != "EXIST_" ]; then
      $EXEC_MODULE "$NAME" "$NAME" "blob" "${FILE_BLOB_OBJECT_HASH}" > /dev/null 2>&1
  fi
  echo "blob ${FILE_BLOB_OBJECT_HASH} $NAME"
}

add_blob() {
  NAME="$1"
  echo $(calc_blob $NAME write_and_add_index)
}

calc_tree() {
  DIRNAME="$1"
  EXEC_MODULE="$2"
  if [ -f "${TMP_CACHE_NAME}${DIRNAME}" ]; then
      true > "${TMP_CACHE_NAME}${DIRNAME}"
  else
      touch "${TMP_CACHE_NAME}${DIRNAME}"
  fi
  for fp in $(ls $DIRNAME/*)
  do
      if [ -d $fp ]; then
          FP_LINE=$(calc_tree $fp $EXEC_MODULE)
          echo "${FP_LINE}" >> "${TMP_CACHE_NAME}${DIRNAME}"
      elif [ -f $fp ]; then
          FP_LINE=$(calc_blob $fp $EXEC_MODULE)
          echo "${FP_LINE}" >> "${TMP_CACHE_NAME}${DIRNAME}"
      else
          die 1 "invalid filepath $fp"
      fi
  done
  DIR_TREE_OBJECT_HASH=$(githash "tree" "${TMP_CACHE_NAME}${DIRNAME}")
  if [ "EXIST_"$EXEC_MODULE != "EXIST_" ]; then
      $EXEC_MODULE "${DIRNAME}" "${TMP_CACHE_NAME}${DIRNAME}" "tree" "${DIR_TREE_OBJECT_HASH}" > /dev/null 2>&1
  fi
  # clean tmp.
  \rm -f "${TMP_CACHE_NAME}${DIRNAME}"
  echo "tree ${DIR_TREE_OBJECT_HASH} $DIRNAME"
}

add_tree() {
  DIRNAME="$1"
  echo $(calc_tree $DIRNAME write_and_add_index)
}

write_and_add_index() {
  NAME="$1"
  CONTENT_PATH="$2"
  TYPE="$3"
  HASH="$4"
  write_object "${CONTENT_PATH}" "${TYPE}" "${HASH}"
  add_into_index "${TYPE} ${HASH} ${NAME}"
}

add_into_index() {
  INPUT_VALUES="$@"
  if [ ! -f $GITDIR/index ]; then
      touch $GITDIR/index
  fi

  INPUT_HASH=$(echo $INPUT_VALUES|awk '{print $2}')
  INDEX_HASH=$(check_in_index $INPUT_HASH)

  if [ "${INDEX_HASH}" == "1" ]; then
      echo "${INPUT_VALUES}" >> $GITDIR/index
  else
      if [[ ${INDEX_HASH} == *"${INPUT_HASH}"* ]]; then
          cp $GITDIR/index $GITDIR/replace.index
          cat $GITDIR/replace.index | sed '/'${INPUT_HASH}'/d' > $GITDIR/index
          \rm -f $GITDIR/replace.index
          echo "${INPUT_VALUES}" >> $GITDIR/index
      fi
  fi
}

commit_into_repo() {
  COMMIT_ARG=$1
  if [ ! -s $GITDIR/index ]; then
      die 1 "Nothing to commit."
  fi

  COMMIT_MSG=""
  case "$COMMIT_ARG" in
  -m)
    shift 1
    COMMIT_MSG=$@
    ;;
  *)
    die 1 "Unknown argument: $COMMIT_ARG."
    ;;
  esac

  if [ "EXIST_${COMMIT_MSG}" == "EXIST_" ]; then
      die 1 "Invalid commit message."
  fi

  true > $GITDIR/tree.index
  cat $GITDIR/index | while read line 
  do
      echo $line >> $GITDIR/tree.index
  done

  DIR_TREE_OBJECT_HASH=$(githash "tree" "$GITDIR/tree.index")
  write_object "$GITDIR/tree.index" "tree" "${DIR_TREE_OBJECT_HASH}"

  PARENT_HASH=""
  if [ -f $GITDIR/refs/heads/$HEAD_DEFAULT ]; then
      PARENT_HASH=$(cat $GITDIR/refs/heads/$HEAD_DEFAULT)
  fi

  true > $GITDIR/commit.index
  echo "tree ${DIR_TREE_OBJECT_HASH}" >> $GITDIR/commit.index
  if [ "EXIST_"$PARENT_HASH == "EXIST_" ]; then
      echo "parent ${PARENT_OBJECT_HASH}" >> $GITDIR/commit.index
  fi
  echo "${COMMIT_MSG}" >> $GITDIR/commit.index

  COMMIT_OBJECT_HASH=$(githash "commit" "$GITDIR/commit.index")
  write_object "$GITDIR/commit.index" "commit" "${COMMIT_OBJECT_HASH}"
  echo "${COMMIT_OBJECT_HASH}" > $GITDIR/refs/heads/$HEAD_DEFAULT
  true > $GITDIR/index

  # clean up
  \rm -f $GITDIR/tree.index
  \rm -f $GITDIR/commit.index
}

show_status() {
  if [ ! -f $GITDIR/index ]; then
      touch $GITDIR/index
  fi
  echo "xgit status"
  echo "                    "
  if [ -s $GITDIR/index ]; then
      echo "Staged: "
      cat $GITDIR/index
      echo "                    "
  else
      echo "Staged: "
      echo "                    "
  fi
  echo "Changes not staged: "
  for fp in $(ls .)
  do
      # compare with refs or staging area.
      if [ -f $GITDIR/refs/heads/$HEAD_DEFAULT ]; then
          echo "TODO: comparing current working area tree with staging or repo."
      else
          if [ -f $fp ]; then
              CURRENT_FP_HASH_LINE=$(calc_blob $fp)
              CURRENT_FP_HASH=$(echo "${CURRENT_FP_HASH_LINE}" | awk '{print $2}' || echo "1")
              INDEX_HASH=$(check_in_index $CURRENT_FP_HASH)
              if [ "$INDEX_HASH" == "1" ]; then
                  echo "Untracked: $fp"
              else
                  CHECK_EXIST=$(echo "$CURRENT_FP_HASH_LINE" | grep "$INDEX_HASH" | awk '{print $2}' || echo "1")
                  if [ "$CHECK_EXIST" == "1" ]; then
                    echo "Changed: $fp"
                  fi
              fi
          elif [ -d $fp ]; then
              CURRENT_FP_HASH_LINE=$(calc_tree $fp)
              CURRENT_FP_HASH=$(echo "${CURRENT_FP_HASH_LINE}" | awk '{print $2}' || echo "1")
              INDEX_HASH=$(check_in_index $CURRENT_FP_HASH)
              if [ "$INDEX_HASH" == "1" ]; then
                  echo "Untracked: $fp"
              else
                  CHECK_EXIST=$(echo "$CURRENT_FP_HASH_LINE" | grep "$INDEX_HASH" | awk '{print $2}' || echo "1")
                  if [ "$CHECK_EXIST" == "1" ]; then
                    echo "Changed: $fp"
                  fi
              fi
          else
              die 1 "invalid filepath $fp"
          fi
      fi
  done
}

[ "$CMD" ] || {
  echo "xgit - another git implementation via shell."
  echo "                     "
  echo "Syntax:"
  echo "xgit init"
  echo "xgit status"
  echo "xgit add [filepath]"
  echo "xgit commit [message]"
  exit 1
}

case "$CMD" in
  init)
    [ ! -d $GITDIR ] && mkdir -p $GITDIR
    [ ! -d $GITDIR/objects ] && mkdir -p $GITDIR/objects
    [ ! -d $GITDIR/refs/heads ] && mkdir -p $GITDIR/refs/heads
    ;;
  status)
    check
    show_status
    ;;
  add)
    check
    shift 1
    for fp in $@; do
        # for each file or dir, create object.
        # 1. for file, create blob object directly.
        # 2. for dir, create tree object and collect the objects under the tree.
        if [ -d $fp ]; then
            add_tree $fp
        elif [ -f $fp ]; then
            add_blob $fp
        else
            echo "$fp not found"
        fi
    done
    ;;
  cat-file)
    check
    shift 1
    cat_object_file $@
    ;;
  commit)
    check
    shift 1
    commit_into_repo $@
    ;;
  *)
    die 1 "Unknown command: $CMD."
    ;;
esac
